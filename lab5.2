импортная  математика


класс  Node :

    def  __init__ ( себя , данные ):
        я . left  =  Нет
        я . right  =  Нет
        я . данные  =  данные

# Вставить метод для создания узлов
    def  insert ( self , data ):
        если  сам . данные :
            если  данные  <  self . данные :
                если  сам . левый  не  None :
                    я . left  =  Узел ( данные )
                еще :
                    я . слева . вставить ( данные )
            elif  data  >  self . данные :
                если  сам . право  не  None :
                    я . right  =  Узел ( данные )
                еще :
                    я . правильно . вставить ( данные )
        еще :
            я . данные  =  данные

    def  createBalancedTree ( self , data ):
        вернуть  себя . BalancedTree ( данные , 0 , len ( данные ) - 1 )

    def  BalancedTree ( self , data , start , end ):
        если  конец  <  начало :
            return  None
        середина  =  математика . этаж (( начало + конец ) / 2 )
        tree  =  Узел ( данные [ середина ])
        дерево . left  =  self . BalancedTree ( данные , начало , середина  -  1 )
        дерево . право  =  себя . BalancedTree ( данные , середина  +  1 , конец )
         дерево возврата

    def  createlist ( self , root ):
        res  = []
        если  корень :
            res  =  self . createlist ( корень . слева )
            рез . Append ( корень . данные )
            res  =  res  +  self . createlist ( корень . справа )
        вернуть  res

# Распечатать дерево
    def  PrintTree ( сам ):
        если  сам . слева :
            print ( f "Вершина { self . data } " )
            print ( f "Лево { self . left . data } " )
            я . слева . PrintTree ()
        если  сам . право :
            print ( f "Вершина { self . data } " )
            print ( f "Право { self . right . data } " )
            я . правильно . PrintTree ()

корень  =  Узел ( 12 )
корень . вставка ( 1 )
корень . вставка ( 4 )
корень . вставка ( 9 )
корень . вставка ( 10 )
корень . вставка ( 5 )
корень . вставка ( 8 )
корень . вставка ( 11 )
корень . вставка ( 2 )
корень . вставка ( 14 )
корень . вставка ( 3 )
корень . вставка ( 7 )
корень . вставка ( 20 )
корень . вставка ( 16 )
listTree  =  корень . создать список ( корень )
Баланс  =  корень . createBalancedTree ( listTree )
print ( Balance . PrintTree ())
